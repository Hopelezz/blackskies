---
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import Posts from "@layouts/Posts.astro";
import PostDetails from "@layouts/PostDetails.astro";
import getSortedPosts from "@utils/getSortedPosts";
import getPageNumbers from "@utils/getPageNumbers";
import slugify from "@utils/slugify";
import { SITE } from "@config";

export interface Props {
  post?: CollectionEntry<"blog"> | CollectionEntry<"series">;
}

export async function getStaticPaths() {
  const blogs = await getCollection("blog", ({ data }) => !data.draft);
  const series = await getCollection("series", ({ data }) => !data.draft);
  const posts = [...blogs, ...series];

  const postResult = posts.map(post => ({
    params: { slug: slugify(post.data) },
    props: { post },
  }));

  const pagePaths = getPageNumbers(posts.length).map(pageNum => ({
    params: { slug: String(pageNum) },
    props: { post: undefined },
  }));

  return [...postResult, ...pagePaths];
}

const { slug } = Astro.params;
const { post } = Astro.props;

const blog = await getCollection("blog");
const series = await getCollection("series");
const allPosts = [...blog, ...series];

const sortedPosts = getSortedPosts(allPosts);
const totalPages = getPageNumbers(sortedPosts.length);

const currentPage =
  slug && !isNaN(Number(slug)) && totalPages.includes(Number(slug))
    ? Number(slug)
    : 0;

const lastPost = currentPage * SITE.postPerPage;
const startPost = lastPost - SITE.postPerPage;

const paginatedPosts = sortedPosts.slice(startPost, lastPost);

// Separate posts by collection type
const blogPosts = paginatedPosts.filter(post => post.collection === "blog");
const seriesPosts = paginatedPosts.filter(post => post.collection === "series");
---

{
  post ? (
    <PostDetails post={post} />
  ) : (
    <Posts
      posts={blogPosts.length > 0 ? blogPosts : seriesPosts}
      pageNum={currentPage}
      totalPages={totalPages.length}
    />
  )
}
