---
// Import necessary functions and components
import { CollectionEntry, getCollection } from "astro:content";
import Posts from "@layouts/Posts.astro";
import PostDetails from "@layouts/PostDetails.astro";
import getSortedPosts from "@utils/getSortedPosts";
import getPageNumbers from "@utils/getPageNumbers";
import slugify from "@utils/slugify";
import { SITE } from "@config";

// Define the Props interface
export interface Props {
  post: CollectionEntry<"blog" | "series">;
}

// Function to generate static paths for dynamic pages
export async function getStaticPaths() {
  // Retrieve all non-draft posts from the blog and series collections
  const blogs = await getCollection("blog", ({ data }) => !data.draft);
  const series = await getCollection("series", ({ data }) => !data.draft);
  // Combine the two collections
  const posts = [...blogs, ...series];

  // Generate paths for each post and pagination
  const postResult = posts.map(post => ({
    params: { slug: slugify(post.data) },
    props: { post },
  }));

  const pagePaths = getPageNumbers(posts.length).map(pageNum => ({
    params: { slug: String(pageNum) },
  }));

  return [...postResult, ...pagePaths];
}

// Extract parameters from Astro context
const { slug } = Astro.params;
const { post } = Astro.props;

// Retrieve all posts from blog and series collections
const blog = await getCollection("blog");
const series = await getCollection("series");
const posts = [...blog, ...series];

// Sort posts and calculate pagination
const sortedPosts = getSortedPosts(
  posts as Array<CollectionEntry<"blog" | "series">>
);
const totalPages = getPageNumbers(sortedPosts.length);
const currentPage =
  slug && !isNaN(Number(slug)) && totalPages.includes(Number(slug))
    ? Number(slug)
    : 0;
const lastPost = currentPage * SITE.postPerPage;
const startPost = lastPost - SITE.postPerPage;

// Get paginated posts
const paginatedPosts = sortedPosts.slice(startPost, lastPost);
---

{
  post ? (
    <PostDetails post={post} />
  ) : (
    <Posts
      posts={paginatedPosts as Array<CollectionEntry<"blog">>}
      pageNum={currentPage}
      totalPages={totalPages.length}
    />
  )
}
