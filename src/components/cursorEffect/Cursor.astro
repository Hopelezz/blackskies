---

---

<canvas id="particleCanvas"></canvas>

<style>
  #particleCanvas {
    position: fixed;
    left: 0;
    top: 0;
    width: 100vw;
    height: 100vh;
    pointer-events: none;
    z-index: 1000;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const canvas = document.getElementById(
      "particleCanvas"
    ) as HTMLCanvasElement;
    const ctx = canvas?.getContext("2d");
    let spots: Particle[] = [];

    const config = {
      particleColor: "hsl(153.469, 48.7%, 46.8%)",
      particleSize: {
        min: window.innerWidth < 768 ? 0.5 : 0.1,
        max: window.innerWidth < 768 ? 3.0 : 2.1,
      },
      particleSpeed: {
        min: -0.7,
        max: 0.7,
      },
      particleShrinkRate: 0.02,
      particleMinSize: 0.3,
      connectionDistance: window.innerWidth < 768 ? 70 : 90,
      particlesPerTouch: 1,
      maxParticles: 150,
    };

    const mouse = {
      x: undefined as number | undefined,
      y: undefined as number | undefined,
    };

    function setCanvasSize() {
      const dpr = window.devicePixelRatio || 1;
      canvas.width = window.innerWidth * dpr;
      canvas.height = window.innerHeight * dpr;
      canvas.style.width = `${window.innerWidth}px`;
      canvas.style.height = `${window.innerHeight}px`;

      if (ctx) {
        ctx.scale(dpr, dpr);
      }
    }

    function updateMousePosition(event: TouchEvent | MouseEvent) {
      const touch = "touches" in event ? event.touches[0] : event;
      const rect = canvas.getBoundingClientRect();
      mouse.x = touch.clientX - rect.left;
      mouse.y = touch.clientY - rect.top;
      addParticles(config.particlesPerTouch);
    }

    class Particle {
      x: number;
      y: number;
      size: number;
      speedX: number;
      speedY: number;
      color: string;

      constructor() {
        this.x = mouse.x ?? 0;
        this.y = mouse.y ?? 0;
        this.size =
          Math.random() * (config.particleSize.max - config.particleSize.min) +
          config.particleSize.min;
        this.speedX =
          Math.random() *
            (config.particleSpeed.max - config.particleSpeed.min) +
          config.particleSpeed.min;
        this.speedY =
          Math.random() *
            (config.particleSpeed.max - config.particleSpeed.min) +
          config.particleSpeed.min;
        this.color = config.particleColor;
      }

      update() {
        this.x += this.speedX;
        this.y += this.speedY;
        if (this.size > config.particleMinSize) {
          this.size -= config.particleShrinkRate;
        }
      }

      draw() {
        if (!ctx) return;
        ctx.fillStyle = this.color;
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
        ctx.fill();
      }
    }

    function addParticles(count: number) {
      if (spots.length >= config.maxParticles) {
        spots = spots.slice(-config.maxParticles);
        return;
      }

      for (let i = 0; i < count; i++) {
        spots.push(new Particle());
      }
    }

    function handleParticles() {
      for (let i = 0; i < spots.length; i++) {
        spots[i].update();
        spots[i].draw();

        for (let j = i + 1; j < spots.length; j++) {
          const dx = spots[i].x - spots[j].x;
          const dy = spots[i].y - spots[j].y;
          const distance = Math.sqrt(dx * dx + dy * dy);

          if (distance < config.connectionDistance && ctx) {
            ctx.beginPath();
            ctx.strokeStyle = spots[i].color;
            ctx.lineWidth = spots[i].size / 10;
            ctx.moveTo(spots[i].x, spots[i].y);
            ctx.lineTo(spots[j].x, spots[j].y);
            ctx.stroke();
          }
        }

        if (spots[i].size <= config.particleMinSize) {
          spots.splice(i, 1);
          i--;
        }
      }
    }

    function animate() {
      if (!ctx) return;
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      handleParticles();
      requestAnimationFrame(animate);
    }

    // Event Listeners
    setCanvasSize();
    window.addEventListener("resize", setCanvasSize);

    // Mouse events
    document.addEventListener("mousemove", updateMousePosition);
    document.addEventListener("mousedown", updateMousePosition);
    document.addEventListener("mousemove", updateMousePosition);

    // Touch events
    document.addEventListener("touchstart", updateMousePosition, {
      passive: true,
    });
    document.addEventListener("touchmove", updateMousePosition, {
      passive: true,
    });
    document.addEventListener("touchend", () => {
      mouse.x = undefined;
      mouse.y = undefined;
    });

    animate();
  });
</script>
