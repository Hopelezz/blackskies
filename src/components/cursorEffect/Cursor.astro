---
---

<canvas id="canvas"></canvas>

<style>
  #canvas {
    position: fixed;
    left: 0;
    top: 0;
    pointer-events: none;
    z-index: -100;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const canvas = document.getElementById("canvas") as HTMLCanvasElement;
    const ctx = canvas?.getContext("2d");
    let spots: Particle[] = [];
    // let hue = 274;
    const mouse: { x: number | undefined; y: number | undefined } = {
      x: undefined,
      y: undefined,
    };

    function setCanvasSize() {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    }

    setCanvasSize();
    window.addEventListener("resize", setCanvasSize);

    function updateMousePosition(event: MouseEvent | TouchEvent) {
      if ("touches" in event) {
        // This is a TouchEvent
        mouse.x = event.touches[0].clientX;
        mouse.y = event.touches[0].clientY;
      } else {
        // This is a MouseEvent
        mouse.x = event.clientX;
        mouse.y = event.clientY;
      }
    }

    function addParticles(count: number) {
      for (let i = 0; i < count; i++) {
        spots.push(new Particle());
      }
    }

    window.addEventListener("mousemove", event => {
      updateMousePosition(event);
      addParticles(1); // Adjust the number of particles added on mouse movement
    });

    window.addEventListener("touchstart", event => {
      updateMousePosition(event);
      addParticles(5); // Adjust the number of particles added on touch start
    });

    window.addEventListener("touchmove", event => {
      updateMousePosition(event);
      addParticles(7); // Adjust the number of particles added on touch move events
    });

    window.addEventListener("mouseout", () => {
      mouse.x = undefined;
      mouse.y = undefined;
    });

    window.addEventListener("touchend", () => {
      mouse.x = undefined;
      mouse.y = undefined;
    });

    class Particle {
      x: number;
      y: number;
      size: number;
      speedX: number;
      speedY: number;
      color: string;

      constructor() {
        this.x = mouse.x ?? 0;
        this.y = mouse.y ?? 0;
        this.size = Math.random() * 2 + 0.1;
        this.speedX = Math.random() * 2 - 1;
        this.speedY = Math.random() * 2 - 1;
        this.color = "hsl(153.469, 48.7%, 46.8%)";
      }
      update() {
        this.x += this.speedX;
        this.y += this.speedY;
        if (this.size > 0.1) this.size -= 0.03;
      }
      draw() {
        if (ctx) {
          ctx.fillStyle = this.color;
          ctx.beginPath();
          ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
          ctx.fill();
        }
      }
    }

    function handleParticles() {
      for (let i = 0; i < spots.length; i++) {
        spots[i].update();
        spots[i].draw();

        for (let j = i + 1; j < spots.length; j++) {
          const dx = spots[i].x - spots[j].x;
          const dy = spots[i].y - spots[j].y;
          const distance = Math.sqrt(dx * dx + dy * dy);

          if (distance < 90) {
            if (ctx) {
              ctx.beginPath();
              ctx.strokeStyle = spots[i].color;
              ctx.lineWidth = spots[i].size / 10;
              ctx.moveTo(spots[i].x, spots[i].y);
              ctx.lineTo(spots[j].x, spots[j].y);
              ctx.stroke();
            }
          }
        }
        if (spots[i].size <= 0.3) {
          spots.splice(i, 1);
          i--;
        }
      }
    }

    function animate() {
      if (ctx) {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
      }
      handleParticles();
      requestAnimationFrame(animate);
    }

    animate();
  });
</script>
