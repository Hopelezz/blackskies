---
// src/components/admin/UsersManagement.astro
import { supabase } from "../../lib/supabase";
import type { UserRole } from "../../types/roles";

interface Props {
  currentUserRole: UserRole;
}

const { currentUserRole } = Astro.props;

// Only admins can access this component
if (currentUserRole !== 'admin') {
  return null;
}

const { data: users, error } = await supabase
  .from('profile')
  .select(`
    id,
    user_id,
    email,
    username,
    full_name,
    role,
    created_at
  `)
  .order('created_at', { ascending: false });

if (error) {
  console.error("Error fetching users:", error);
}
---

<div class="p-4">
  <div class="mb-6 flex items-center justify-between">
    <h2 class="text-2xl font-bold">User Management</h2>
  </div>

  <div class="relative overflow-x-auto shadow-md sm:rounded-lg">
    <table class="w-full text-left text-sm text-gray-500">
      <thead class="bg-gray-50 text-xs uppercase text-gray-700">
        <tr>
          <th scope="col" class="px-6 py-3">Name</th>
          <th scope="col" class="px-6 py-3">Email</th>
          <th scope="col" class="px-6 py-3">Role</th>
          <th scope="col" class="px-6 py-3">Actions</th>
        </tr>
      </thead>
      <tbody>
        {users?.map((user) => (
          <tr class="border-b bg-white hover:bg-gray-50">
            <td class="px-6 py-4">{user.full_name || user.username}</td>
            <td class="px-6 py-4">{user.email}</td>
            <td class="px-6 py-4">
              <select
                class="role-select rounded-lg border border-gray-300 p-2"
                data-user-id={user.user_id}
                value={user.role}
              >
                <option value="admin">Admin</option>
                <option value="editor">Editor</option>
                <option value="author">Author</option>
                <option value="viewer">Viewer</option>
              </select>
            </td>
            <td class="px-6 py-4">
              <button
                class="text-red-600 hover:text-red-900"
                data-user-id={user.user_id}
                data-action="delete"
              >
                Delete
              </button>
            </td>
          </tr>
        ))}
      </tbody>
    </table>
  </div>
</div>

<script>
  // Handle role changes
  document.querySelectorAll('.role-select').forEach(select => {
    select.addEventListener('change', async (e) => {
      const select = e.target as HTMLSelectElement;
      const userId = select.dataset.userId;
      const newRole = select.value;

      try {
        const response = await fetch('/api/users/update-role', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            userId,
            role: newRole,
          }),
        });

        if (!response.ok) {
          throw new Error('Failed to update role');
        }

        // Show success message
        alert('Role updated successfully');
      } catch (error) {
        console.error('Error updating role:', error);
        alert('Failed to update role');
        // Reset select to previous value
        select.value = select.dataset.originalValue || '';
      }
    });
  });

  // Handle user deletion
  document.querySelectorAll('[data-action="delete"]').forEach(button => {
    button.addEventListener('click', async (e) => {
      const button = e.target as HTMLButtonElement;
      const userId = button.dataset.userId;

      if (!confirm('Are you sure you want to delete this user?')) {
        return;
      }

      try {
        const response = await fetch('/api/users/delete', {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            userId,
          }),
        });

        if (!response.ok) {
          throw new Error('Failed to delete user');
        }

        // Remove the row from the table
        button.closest('tr')?.remove();
        alert('User deleted successfully');
      } catch (error) {
        console.error('Error deleting user:', error);
        alert('Failed to delete user');
      }
    });
  });
</script>