---
// src/components/admin/PostEditor.astro
import Banner from '../../components/admin/Banner.astro';
interface Props {
  post?: any;
}

const { post } = Astro.props;
const isEditing = !!post;

// Use banner to display warnings or error messages for submit
let slugWarning: HTMLDivElement | null = null;

---

<div class="space-y-6 max-w-6xl mx-auto">
  <!-- <Banner type="error" message="This URL slug is already in use. It will be auto-numbered on save." /> -->
  <form id="postForm" class="space-y-6">
    {isEditing && <input type="hidden" name="id" value={post.id} />}
    
    <div>
      <label for="title" class="block text-sm font-medium text-gray-700">Title</label>
      <input
        type="text"
        name="title"
        id="title"
        required
        value={post?.title ?? ""}
        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
      />
    </div>

    <div>
      <label for="slug" class="block text-sm font-medium text-gray-700">URL Slug</label>
      <input
        type="text"
        name="slug"
        id="slug"
        required
        readonly
        value={post?.slug ?? ""}
        class="mt-1 block w-full rounded-md border-gray-300 bg-gray-50 shadow-sm focus:border-blue-500 focus:ring-blue-500"
      />
      <div id="slug-warning" class="mt-1 text-sm text-red-600 hidden"></div>
    </div>

    <div>
      <label for="tags" class="block text-sm font-medium text-gray-700">Tags (comma-separated)</label>
      <input
        type="text"
        name="tags"
        id="tags"
        value={post?.tags?.join(", ") ?? ""}
        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
        placeholder="tech, programming, web"
      />
    </div>

    <div class="space-y-2">
      <label class="block text-sm font-medium text-gray-700">Content</label>
      <div class="flex flex-col lg:flex-row gap-4 h-[600px]">
        <!-- Editor -->
        <div class="flex-1 h-full">
          <textarea
            name="content"
            id="content"
            required
            class="h-full w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 font-mono text-sm resize-none"
            placeholder="Write your markdown content here..."
          >{post?.content ?? ""}</textarea>
        </div>
        <!-- Preview -->
        <div class="flex-1 h-full">
          <div class="h-full w-full rounded-md border border-gray-300 shadow-sm overflow-auto bg-white">
            <div id="preview" class="prose max-w-none p-4 prose-img:max-w-full prose-img:h-auto"></div>
          </div>
        </div>
      </div>
    </div>

    <div class="flex items-center space-x-4">
      <input
        type="checkbox"
        name="published"
        id="published"
        checked={post?.published ?? false}
        class="h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
      />
      <label for="published" class="text-sm text-gray-700">Published</label>
    </div>

    <div class="flex justify-end gap-4">
      <a
        href="/admin/posts"
        class="rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
      >
        Cancel
      </a>
      <button
        type="submit"
        class="rounded-md bg-blue-600 px-4 py-2 text-sm font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
      >
        {isEditing ? "Update Post" : "Create Post"}
      </button>
    </div>
  </form>
</div>

<script>
  import { marked } from 'marked';
  import DOMPurify from 'dompurify';

  const form = document.getElementById("postForm") as HTMLFormElement;
  const titleInput = document.getElementById("title") as HTMLInputElement;
  const slugInput = document.getElementById("slug") as HTMLInputElement;
  const contentInput = document.getElementById("content") as HTMLTextAreaElement;
  const previewDiv = document.getElementById("preview") as HTMLDivElement;
  const slugWarning = document.getElementById("slug-warning") as HTMLDivElement;

  // Configure marked options
  marked.setOptions({
    gfm: true, // GitHub Flavored Markdown
    breaks: true, // Add <br> on single line breaksDOMPurify
    pedantic: false, // Don't be pedantic about line breaks
  });

  // Auto-generate slug from title
  titleInput?.addEventListener("input", async (e) => {
    const title = (e.target as HTMLInputElement).value;
    const generatedSlug = title
      .toLowerCase()
      .replace(/[^a-z0-9]+/g, "-")
      .replace(/(^-|-$)+/g, "");
    
    slugInput.value = generatedSlug;

    // Check slug availability
    if (generatedSlug) {
      try {
        const response = await fetch(`/api/posts/check-slug?slug=${generatedSlug}`);
        const data = await response.json();
        
        if (data.exists) {
          slugWarning.textContent = "This URL slug is already in use. It will be auto-numbered on save.";
          slugWarning.classList.remove("hidden");
        } else {
          slugWarning.classList.add("hidden");
        }
      } catch (error) {
        console.error("Error checking slug:", error);
      }
    }
  });

  // Live preview with debounce
  let previewTimeout: NodeJS.Timeout;
  contentInput?.addEventListener("input", (e) => {
    clearTimeout(previewTimeout);
    previewTimeout = setTimeout(() => {
      const markdown = (e.target as HTMLTextAreaElement).value;
      updatePreview(markdown);
    }, 300);
  });

  function updatePreview(markdown: string) {
    if (!previewDiv) return;
    
    const rawHtml = marked(markdown);
    const sanitizedHtml = DOMPurify.sanitize(rawHtml, {
      ALLOWED_TAGS: [
        'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6',
        'ul', 'ol', 'li', 'a', 'strong', 'em',
        'code', 'pre', 'blockquote', 'hr', 'br',
        'table', 'thead', 'tbody', 'tr', 'th', 'td',
        'img', 'div', 'span'
      ],
      ALLOWED_ATTR: ['href', 'src', 'alt', 'title', 'class', 'target']
    });
    previewDiv.innerHTML = sanitizedHtml;
  }

  // Initialize preview with existing content
  if (contentInput) {
    updatePreview(contentInput.value);
  }

  // Form submission handler
  form?.addEventListener("submit", async (e) => {
    e.preventDefault();
    
    try {
      const formData = new FormData(form);
      const postData = {
        title: formData.get("title"),
        slug: formData.get("slug"),
        content: formData.get("content"),
        tags: formData.get("tags")?.toString().split(",").map(tag => tag.trim()).filter(Boolean) || [],
        published: formData.get("published") === "on"
      };

      const postId = form.querySelector<HTMLInputElement>('input[name="id"]')?.value;
      const method = postId ? "PUT" : "POST";
      const url = postId ? `/api/posts/${postId}` : "/api/posts";

      const response = await fetch(url, {
        method,
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(postData)
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || "Failed to save post");
      }

      window.location.href = "/admin/posts";
    } catch (error) {
      console.error("Error saving post:", error);
      alert(error instanceof Error ? error.message : "Failed to save post");
    }
  });

  // Handle tab key in textarea
  contentInput?.addEventListener("keydown", (e) => {
    if (e.key === "Tab") {
      e.preventDefault();
      const start = contentInput.selectionStart;
      const end = contentInput.selectionEnd;
      contentInput.value = contentInput.value.substring(0, start) + "  " + contentInput.value.substring(end);
      contentInput.selectionStart = contentInput.selectionEnd = start + 2;
    }
  });
</script>

<style>
  /* Custom scrollbar for the preview */
  #preview::-webkit-scrollbar {
    width: 8px;
  }

  #preview::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 4px;
  }

  #preview::-webkit-scrollbar-thumb {
    background: #888;
    border-radius: 4px;
  }

  #preview::-webkit-scrollbar-thumb:hover {
    background: #666;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .h-[600px] {
      height: auto;
    }

    #content, #preview {
      min-height: 300px;
    }
  }
</style>