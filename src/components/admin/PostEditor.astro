---
// components/admin/PostEditor.astro
import { supabase } from "../../lib/supabase";
import Banner from "./Banner.astro";

interface Props {
  post?: {
    id: string;
    title: string;
    slug: string;
    description: string;
    content: string;
    tags: string[];
    published: boolean;
  };
}

const { post } = Astro.props;
const isEditing = !!post;
---

<div class="mx-auto max-w-4xl">
  <form id="postForm" class="space-y-6">
    {isEditing && <input type="hidden" name="id" value={post.id} />}
    
    <!-- Title -->
    <div>
      <label for="title" class="block text-sm font-medium text-gray-300">Title</label>
      <input
        type="text"
        name="title"
        id="title"
        required
        value={post?.title || ""}
        class="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-indigo-500"
      />
    </div>

    <!-- Slug -->
    <div>
      <label for="slug" class="block text-sm font-medium text-gray-300">Slug</label>
      <input
        type="text"
        name="slug"
        id="slug"
        required
        value={post?.slug || ""}
        class="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-indigo-500"
      />
    </div>

    <!-- Tags (comma-separated) -->
    <div>
      <label for="tags" class="block text-sm font-medium text-gray-300">Tags (comma-separated)</label>
      <input
        type="text"
        name="tags"
        id="tags"
        value={post?.tags?.join(", ") || ""}
        class="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-indigo-500"
      />
    </div>

    <!-- Content -->
    <div class="grid grid-cols-2 gap-4">
      <div>
        <label for="content" class="block text-sm font-medium text-gray-700">Content</label>
        <textarea
          name="content"
          id="content"
          rows="20"
          class="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 font-mono shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-indigo-500"
        >{post?.content || ""}</textarea>
      </div>
      <div>
        <label class="block text-sm font-medium text-gray-700">Preview</label>
        <div 
          id="preview" 
          class="prose mt-1 block h-[calc(20*1.5rem+1rem)] w-full overflow-auto rounded-md border border-gray-300 p-3 shadow-sm"
        >
        </div>
      </div>
    </div>

    <!-- Published Status -->
    <div class="flex items-center">
      <input
        type="checkbox"
        name="published"
        id="published"
        checked={post?.published || false}
        class="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500"
      />
      <label for="published" class="ml-2 block text-sm text-gray-700">Published</label>
    </div>

    <div class="flex justify-end gap-2">
      <button
        type="button"
        id="cancelBtn"
        class="rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
      >
        Cancel
      </button>
      <button
        type="submit"
        class="rounded-md bg-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
      >
        {isEditing ? "Update Post" : "Create Post"}
      </button>
    </div>
  </form>

  <div id="errorBanner" class="hidden">
    <Banner type="error" message="" />
  </div>
</div>

<script>
  import { marked } from "marked";
  
  // Elements
  const form = document.getElementById("postForm") as HTMLFormElement;
  const titleInput = document.getElementById("title") as HTMLInputElement;
  const slugInput = document.getElementById("slug") as HTMLInputElement;
  const contentInput = document.getElementById("content") as HTMLTextAreaElement;
  const previewDiv = document.getElementById("preview") as HTMLDivElement;
  const cancelBtn = document.getElementById("cancelBtn") as HTMLButtonElement;
  const errorBanner = document.getElementById("errorBanner") as HTMLDivElement;
  const errorMessage = errorBanner?.querySelector(".text-sm") as HTMLDivElement;

  // Auto-generate slug from title
  titleInput?.addEventListener("input", () => {
    if (!slugInput?.value) {
      slugInput.value = titleInput.value
        .toLowerCase()
        .replace(/[^a-z0-9]+/g, "-")
        .replace(/(^-|-$)/g, "");
    }
  });

  // Live preview
  contentInput?.addEventListener("input", () => {
    if (previewDiv) {
      previewDiv.innerHTML = marked(contentInput.value);
    }
  });

  // Initialize preview if content exists
  if (contentInput?.value && previewDiv) {
    previewDiv.innerHTML = marked(contentInput.value);
  }

  // Handle form submission
  form?.addEventListener("submit", async (e) => {
    e.preventDefault();
    const formData = new FormData(form);
    const postId = formData.get("id");
    
    // Prepare post data
    const postData = {
      title: formData.get("title"),
      slug: formData.get("slug"),
      description: formData.get("description"),
      content: formData.get("content"),
      tags: formData.get("tags")?.toString().split(",").map(tag => tag.trim()).filter(Boolean) || [],
      published: formData.has("published"),
    };

    try {
      const response = await fetch(postId ? `/api/posts/${postId}` : "/api/posts", {
        method: postId ? "PUT" : "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(postData),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || "Failed to save post");
      }

      // Redirect to posts page on success
      window.location.href = "/admin/posts";
    } catch (error) {
      if (error instanceof Error) {
        errorMessage.textContent = error.message;
        errorBanner.classList.remove("hidden");
      }
    }
  });

  // Handle cancel button
  cancelBtn?.addEventListener("click", () => {
    window.location.href = "/admin/posts";
  });
</script>