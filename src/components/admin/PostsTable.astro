---
// src/components/admin/PostsTable.astro
interface Props {
  posts: any[];
  showAll?: boolean;
}

const { posts, showAll = false } = Astro.props;

// Format date helper function
function formatDate(dateString: string) {
  return new Date(dateString).toLocaleDateString("en-US", {
    year: "numeric",
    month: "short",
    day: "numeric",
  });
}
---

<div class="relative overflow-x-auto shadow-md sm:rounded-lg">
  <table class="w-full text-left text-sm text-gray-500">
    <thead class="bg-gray-50 text-xs uppercase text-gray-700">
      <tr>
        <th scope="col" class="px-6 py-3">Title</th>
        <th scope="col" class="px-6 py-3">Status</th>
        <th scope="col" class="px-6 py-3">Created</th>
        <th scope="col" class="px-6 py-3">Updated</th>
        <th scope="col" class="px-6 py-3">Actions</th>
      </tr>
    </thead>
    <tbody>
      {
        posts.map(post => (
          <tr class="border-b bg-white hover:bg-gray-50">
            <td class="whitespace-nowrap px-6 py-4 font-medium text-gray-900">
              {post.title}
            </td>
            <td class="px-6 py-4">
              <span
                class={`rounded-full px-2 py-1 text-xs ${
                  post.published
                    ? "bg-green-100 text-green-800"
                    : "bg-yellow-100 text-yellow-800"
                }`}
              >
                {post.published ? "Published" : "Draft"}
              </span>
            </td>
            <td class="px-6 py-4">{formatDate(post.created_at)}</td>
            <td class="px-6 py-4">
              {post.updated_at ? formatDate(post.updated_at) : "-"}
            </td>
            <td class="px-6 py-4">
              <div class="flex space-x-2">
                <a
                  href={`/admin/edit/${post.id}`}
                  class="font-medium text-blue-600 hover:underline"
                >
                  Edit
                </a>
                <button
                  data-post-id={post.id}
                  class="delete-btn font-medium text-red-600 hover:underline"
                >
                  Delete
                </button>
              </div>
            </td>
          </tr>
        ))
      }
    </tbody>
  </table>

  {
    posts.length === 0 && (
      <div class="py-4 text-center">
        <p class="text-gray-500">No posts found</p>
      </div>
    )
  }
</div>

<script>
  async function deletePost(id: string) {
    if (!confirm("Are you sure you want to delete this post?")) {
      return;
    }

    try {
      const response = await fetch(`/api/posts/${id}`, {
        method: "DELETE",
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || "Failed to delete post");
      }

      // Refresh the page or update the UI
      window.location.reload();
    } catch (error) {
      console.error("Error deleting post:", error);
      alert(error.message);
    }
  }

  // Add event listeners to delete buttons
  document.addEventListener("DOMContentLoaded", () => {
    const deleteButtons = document.querySelectorAll(".delete-btn");
    deleteButtons.forEach(button => {
      button.addEventListener("click", e => {
        const postId = (e.target as HTMLElement).dataset.postId;
        if (postId) {
          deletePost(postId);
        }
      });
    });
  });
</script>

<style>
  /* Optional: Add any custom styles here */
  .delete-btn {
    cursor: pointer;
  }
</style>
